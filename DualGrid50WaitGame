import React, { useEffect, useRef, useState, useCallback } from "react";

/**
 * DualGrid50WaitGame
 *
 * Varianta hry typu WAIT:
 * - Target zůstává svítit, dokud hráč neklikne správně.
 * - Bez auto-posunu po čase.
 *
 * Vizualizace:
 * - Dva gridy 50×50 (levý a pravý) vedle sebe.
 * - V každém gridu je vždy aktivní právě jedna buňka.
 * - Aktivní buňka má uvnitř kruh (tečku).
 * - Barva tečky je buď zelená, nebo červená.
 *
 * Barevné pravidlo:
 * - 80 % zelená, 20 % červená.
 * - Nikdy dvě červené po sobě.
 *
 * iSenses standard rozhraní (2025-11-01):
 * props { sessionId, taskId, emitEvent, emitScore }
 *
 * emitEvent({
 *   type: "START" | "HIT" | "ERROR" | "END",
 *   ts: Date.now(),
 *   data: { ... }
 * })
 *
 * emitScore({
 *   taskId,
 *   metrics: {
 *     Completion_Time,
 *     Reaction_Time_Avg,
 *     Reaction_Time_List,
 *     Hits,
 *     Errors,
 *     Total_Lines,
 *     Final_Speed
 *   }
 * })
 *
 * Žádné fetch, žádné websockety.
 * Cleanup při unmountu odešle END + emitScore.
 */

const GRID_SIZE = 50; // 50 x 50
const TOTAL_CELLS = GRID_SIZE * GRID_SIZE;

export default function DualGrid50WaitGame({
  sessionId,
  taskId,
  emitEvent,
  emitScore,
}) {
  // aktivní cíle v levém a pravém gridu (0..2499)
  const [leftTarget, setLeftTarget] = useState(null);
  const [rightTarget, setRightTarget] = useState(null);

  // barva aktuálního targetu ("green" | "red")
  const [color, setColor] = useState("green");

  // poslední použitá barva, abychom nešli red -> red
  const lastColorRef = useRef("green");

  // metriky a časování
  const startTimeRef = useRef(null);

  const hitsRef = useRef(0);
  const errorsRef = useRef(0);

  const reactionTimesRef = useRef([]); // [ms, ms, ...]
  const lastTargetShownTsRef = useRef(null); // kdy jsme rozsvítili aktuální dvojici

  const gameRunningRef = useRef(false);

  // náhodná buňka 0..2499
  const pickRandomCell = useCallback(() => {
    return Math.floor(Math.random() * TOTAL_CELLS);
  }, []);

  // vybere barvu podle pravidla 80/20 s blokací dvou červených v řadě
  const pickColor = useCallback(() => {
    let newColor = "green";

    // pouze pokud poslední nebyla červená, můžeme zkusit červenou
    if (lastColorRef.current !== "red") {
      const r = Math.random(); // 0..1
      // 20 % šance na červenou
      if (r < 0.2) {
        newColor = "red";
      }
    }

    lastColorRef.current = newColor;
    return newColor;
  }, []);

  // nastaví nové targety a novou barvu, uloží timestamp pro reakční čas
  const spawnNewTargets = useCallback(() => {
    // vybrat barvu podle pravidla
    const chosenColor = pickColor();
    setColor(chosenColor);

    // vybrat nové pozice pro levý a pravý grid
    const newLeft = pickRandomCell();
    const newRight = pickRandomCell();

    setLeftTarget(newLeft);
    setRightTarget(newRight);

    lastTargetShownTsRef.current = Date.now();
  }, [pickRandomCell, pickColor]);

  // kliknutí na buňku
  const handleCellClick = useCallback(
    ({ side, index }) => {
      if (!gameRunningRef.current) return;
      const now = Date.now();

      const isHit =
        (side === "left" && index === leftTarget) ||
        (side === "right" && index === rightTarget);

      if (isHit) {
        hitsRef.current += 1;

        // reakční čas od rozsvícení aktuální dvojice targetů
        if (lastTargetShownTsRef.current) {
          const rt = now - lastTargetShownTsRef.current;
          reactionTimesRef.current.push(rt);
        }

        emitEvent({
          type: "HIT",
          ts: now,
          data: {
            sessionId,
            taskId,
            side,
            cellIndex: index,
            color,
            hitsTotal: hitsRef.current,
          },
        });

        // WAIT logika:
        // po zásahu hráčem okamžitě přepneme na nové targety
        spawnNewTargets();
      } else {
        errorsRef.current += 1;

        emitEvent({
          type: "ERROR",
          ts: now,
          data: {
            sessionId,
            taskId,
            side,
            cellIndex: index,
            expectedLeft: leftTarget,
            expectedRight: rightTarget,
            color,
            errorsTotal: errorsRef.current,
          },
        });
      }
    },
    [
      emitEvent,
      leftTarget,
      rightTarget,
      color,
      sessionId,
      taskId,
      spawnNewTargets,
    ]
  );

  // start hry při mountu, cleanup při unmountu
  useEffect(() => {
    const now = Date.now();
    startTimeRef.current = now;
    gameRunningRef.current = true;

    emitEvent({
      type: "START",
      ts: now,
      data: {
        sessionId,
        taskId,
        note: "DualGrid50WaitGame START",
      },
    });

    // inicializace prvního páru targetů
    spawnNewTargets();

    // cleanup
    return () => {
      gameRunningRef.current = false;
      const endTs = Date.now();

      const totalTimeMs =
        startTimeRef.current != null
          ? endTs - startTimeRef.current
          : 0;

      const rtList = reactionTimesRef.current;
      const hits = hitsRef.current;
      const errors = errorsRef.current;

      // průměrná reakce
      let rtAvg = 0;
      if (rtList.length > 0) {
        const sum = rtList.reduce((acc, v) => acc + v, 0);
        rtAvg = sum / rtList.length;
      }

      const metrics = {
        Completion_Time: totalTimeMs,
        Reaction_Time_Avg: rtAvg,
        Reaction_Time_List: rtList,
        Hits: hits,
        Errors: errors,
        Total_Lines: 0, // placeholder podle sjednoceného slovníku
        Final_Speed: 0, // placeholder podle sjednoceného slovníku
      };

      emitEvent({
        type: "END",
        ts: endTs,
        data: {
          sessionId,
          taskId,
          totalTime: totalTimeMs,
          hits,
          errors,
        },
      });

      emitScore({
        taskId,
        metrics,
      });
    };
  }, [emitEvent, emitScore, sessionId, taskId, spawnNewTargets]);

  // render jedné buňky gridu
  const renderCell = useCallback(
    ({ side, index }) => {
      const isActive =
        (side === "left" && index === leftTarget) ||
        (side === "right" && index === rightTarget);

      // barva tečky podle color ("green" | "red")
      let dotBg = "rgba(255,255,255,0.08)"; // neaktivní
      let dotShadow = "none";

      if (isActive && color === "green") {
        dotBg = "rgba(0,255,0,0.9)";
        dotShadow = "0 0 8px rgba(0,255,0,0.9)";
      } else if (isActive && color === "red") {
        dotBg = "rgba(255,0,0,0.9)";
        dotShadow = "0 0 8px rgba(255,0,0,0.9)";
      }

      const cellStyle = {
        width: "100%",
        height: "100%",
        boxSizing: "border-box",
        border: "1px solid rgba(255,255,255,0.06)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        backgroundColor: "rgba(0,0,0,0.6)",
        cursor: "pointer",
        userSelect: "none",
      };

      const dotStyle = {
        width: "60%",
        height: "60%",
        borderRadius: "50%",
        backgroundColor: dotBg,
        boxShadow: dotShadow,
      };

      return (
        <div
          key={index}
          style={cellStyle}
          onClick={() => handleCellClick({ side, index })}
        >
          <div style={dotStyle} />
        </div>
      );
    },
    [handleCellClick, leftTarget, rightTarget, color]
  );

  // komponenta jednoho gridu (50×50)
  const GridPanel = ({ side, label }) => {
    const columnWrapperStyle = {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
    };

    const titleStyle = {
      fontSize: "1rem",
      fontWeight: 500,
      color: "rgba(255,255,255,0.6)",
      letterSpacing: "0.05em",
      marginBottom: "0.75rem",
      textAlign: "center",
    };

    const gridWrapperStyle = {
      width: "45vh",  // čtvercová plocha dle výšky viewportu
      height: "45vh",
      display: "grid",
      gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,
      gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`,
      backgroundColor: "rgba(0,0,0,0.6)",
      border: "2px solid rgba(255,255,255,0.2)",
      borderRadius: "8px",
      boxShadow: "0 10px 30px rgba(0,0,0,0.8)",
      overflow: "hidden",
    };

    const cells = [];
    for (let i = 0; i < TOTAL_CELLS; i++) {
      cells.push(renderCell({ side, index: i }));
    }

    return (
      <div style={columnWrapperStyle}>
        <div style={titleStyle}>{label}</div>
        <div style={gridWrapperStyle}>{cells}</div>
      </div>
    );
  };

  // hlavní layout pro oba gridy
  const outerStyle = {
    width: "100vw",
    height: "100vh",
    backgroundColor: "black",
    color: "white",
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-evenly",
    alignItems: "center",
    fontFamily:
      'system-ui, -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif',
  };

  return (
    <div style={outerStyle}>
      <GridPanel side="left" label="LEFT GRID 50×50" />
      <GridPanel side="right" label="RIGHT GRID 50×50" />
    </div>
  );
}
